// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT posts.id, posts.created_at, posts.updated_at, published_at, title, posts.url, description, feed_id, feeds.id, feeds.created_at, feeds.updated_at, user_id, feeds.name, feeds.url, last_fetched_at, users.id, users.created_at, users.updated_at, users.name FROM posts
LEFT JOIN feeds 
    ON posts.feed_id = feeds.id
LEFT JOIN users
    ON feeds.user_id = users.id
ORDER BY posts.published_at DESC
LIMIT $1
`

type GetPostsForUserRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	PublishedAt   time.Time
	Title         string
	Url           string
	Description   string
	FeedID        uuid.UUID
	ID_2          uuid.NullUUID
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
	UserID        uuid.NullUUID
	Name          sql.NullString
	Url_2         sql.NullString
	LastFetchedAt sql.NullTime
	ID_3          uuid.NullUUID
	CreatedAt_3   sql.NullTime
	UpdatedAt_3   sql.NullTime
	Name_2        sql.NullString
}

func (q *Queries) GetPostsForUser(ctx context.Context, limit int32) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.FeedID,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.UserID,
			&i.Name,
			&i.Url_2,
			&i.LastFetchedAt,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
